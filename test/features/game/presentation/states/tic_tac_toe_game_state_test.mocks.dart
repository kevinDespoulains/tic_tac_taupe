// Mocks generated by Mockito 5.4.6 from annotations
// in tic_tac_taupe/test/features/game/presentation/states/tic_tac_toe_game_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:math' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tic_tac_taupe/features/game/domain/models/tic_tac_toe_game.dart'
    as _i2;
import 'package:tic_tac_taupe/features/game/domain/repositories/tic_tac_toe_game_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTicTacToeGame_0 extends _i1.SmartFake implements _i2.TicTacToeGame {
  _FakeTicTacToeGame_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TicTacToeGameRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTicTacToeGameRepository extends _i1.Mock
    implements _i3.TicTacToeGameRepository {
  MockTicTacToeGameRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.TicTacToeGame> addPlayerSymbol({
    required _i2.TicTacToeGame? game,
    required int? cellIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addPlayerSymbol, [], {
              #game: game,
              #cellIndex: cellIndex,
            }),
            returnValue: _i4.Future<_i2.TicTacToeGame>.value(
              _FakeTicTacToeGame_0(
                this,
                Invocation.method(#addPlayerSymbol, [], {
                  #game: game,
                  #cellIndex: cellIndex,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.TicTacToeGame>);

  @override
  _i4.Future<_i2.TicTacToeGame> addBotSymbol({
    required _i2.TicTacToeGame? game,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addBotSymbol, [], {#game: game}),
            returnValue: _i4.Future<_i2.TicTacToeGame>.value(
              _FakeTicTacToeGame_0(
                this,
                Invocation.method(#addBotSymbol, [], {#game: game}),
              ),
            ),
          )
          as _i4.Future<_i2.TicTacToeGame>);
}

/// A class which mocks [Random].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandom extends _i1.Mock implements _i5.Random {
  MockRandom() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int nextInt(int? max) =>
      (super.noSuchMethod(Invocation.method(#nextInt, [max]), returnValue: 0)
          as int);

  @override
  double nextDouble() =>
      (super.noSuchMethod(Invocation.method(#nextDouble, []), returnValue: 0.0)
          as double);

  @override
  bool nextBool() =>
      (super.noSuchMethod(Invocation.method(#nextBool, []), returnValue: false)
          as bool);
}
